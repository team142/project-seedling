// code generated by team142
package router

import (
	"code-gen/example/basic/handler/v1"
	"code-gen/example/basic/middleware/v1"
	"database/sql"
	"github.com/gofiber/fiber/v2"
)

const (
	RoleReadUser   = "read_user"
	RoleCreateUser = "create_user"
	RoleDeleteUser = "delete_user"
)

func UserRoutes(api fiber.Router, db *sql.DB) {
	api.Options("/user",
		middleware.AuthMiddleware(db, nil),
		handler.UserOptions(),
	)
	api.Get("/user/:id",
		middleware.AuthMiddleware(db, []string{RoleReadUser}),
		handler.GetUserById(db),
	)
	api.Get("/user",
		middleware.AuthMiddleware(db, []string{RoleReadUser}),
		handler.GetMultipleUsers(db),
	)
	api.Put("/user",
		middleware.AuthMiddleware(db, []string{RoleCreateUser}),
		middleware.VerifyUserBody(),
		handler.SaveUser(db, true),
	)
	api.Post("/user",
		middleware.AuthMiddleware(db, []string{RoleCreateUser}),
		middleware.VerifyUserBody(),
		handler.SaveUser(db, false),
	)
	api.Delete("/user",
		middleware.AuthMiddleware(db, []string{RoleDeleteUser}),
		middleware.VerifyUserBody(),
		handler.DeleteUser(db),
	)
	api.Delete("/user/multi",
		middleware.AuthMiddleware(db, []string{RoleDeleteUser}),
		middleware.VerifyUserBody(),
		handler.DeleteUser(db),
	)
	api.Delete("/user/:id",
		middleware.AuthMiddleware(db, []string{RoleDeleteUser}),
		middleware.VerifyUserBody(), handler.DeleteUserById(db),
	)
	api.Trace("/user",
		middleware.AuthMiddleware(db, nil),
		middleware.VerifyUserBody(),
		handler.TraceUser(),
	)
}
