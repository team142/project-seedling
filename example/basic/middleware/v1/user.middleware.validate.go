// code generated by team142

package middleware

import (
	"code-gen/example/basic"
	"code-gen/example/basic/presenter/v1"
	"github.com/gofiber/fiber/v2"
)

// VerifyUserBody will verify if the body passed is valid, setting "User" in fiber Locals to the user
// This should only be used where a BODY with a single User is required
func VerifyUserBody(multi bool) fiber.Handler {
	if multi {
		return VerifyMultipleUserBody()
	}
	return func(c *fiber.Ctx) error {
		user := &basic.User{}
		err := c.BodyParser(user)
		if err != nil {
			c.Status(fiber.StatusBadRequest)
			return c.JSON(
				presenter.DataError{
					Message: "bad body: invalid User",
					Data:    string(c.Body()),
					Error:   err,
				},
			)
		}
		c.Locals("User", user)
		return c.Next()
	}
}

// VerifyMultipleUserBody will verify if the body passed is valid, setting "User" in fiber Locals to the user
// This should only be used where a BODY with a single User is required
func VerifyMultipleUserBody() fiber.Handler {
	return func(c *fiber.Ctx) error {
		userMulti := make([]basic.User, 0)
		err := c.BodyParser(userMulti)
		if err != nil {
			c.Status(fiber.StatusBadRequest)
			return c.JSON(
				presenter.DataError{
					Message: "bad body: invalid array of User",
					Data:    string(c.Body()),
					Error:   err,
				},
			)
		}
		c.Locals("User_multi", userMulti)
		return c.Next()
	}
}
